// SPDX-License-Identifier: SEE LICENSE IN LICENSE.md
// SPDX-FileCopyrightText: 2023 CYBERTEC PostgreSQL International GmbH
// <office@cybertec.at>

//! Specifies the token and syntax kinds to be generated

#[cfg(test)]
pub mod data {
    use crate::sourcegen::syntax::syntax::{SyntaxNode, S};
    use crate::sourcegen::token::token::{Tokens, T};

    pub(crate) const TOKENS: Tokens<'_> = Tokens {
        trivia: &[
            T!("whitespace", "whitespace", "whitespace", "[ \t\n\r]+"),
            T!("comment", "comment", "comment", "--.*"),
        ],
        punctuation: &[
            T!("!", "exclam", "exclam"),
            T!("$$", "dollar_quote", "dollar_quote"),
            T!("%", "percentage", "percentage"),
            T!("(", "l_paren", "l_paren"),
            T!("(+)", "oracle_join"),
            T!(")", "r_paren", "r_paren"),
            T!("*", "asterisk", "asterisk"),
            T!("+", "plus", "arithmetic_op"),
            T!(",", "comma", "comma"),
            T!("-", "minus", "arithmetic_op"),
            T!(".", "dot", "dot"),
            T!("/", "slash", "slash"),
            T!(":=", "assign", "assign"),
            T!(";", "semicolon", "semicolon"),
            T!(
                "comparison",
                "comparison",
                "comparison_op",
                "=|<>|<|>|<=|>="
            ),
            T!("||", "double_pipe", "concat"),
        ],
        literals: &[
            T!("int_literal", "integer", "integer", r"-?\d+", 2),
            T!(
                "unquoted_ident",
                "unquoted_ident",
                "ident",
                r"(?i)[a-z_][a-z0-9_$#]*",
                1
            ),
            T!("quoted_ident", "quoted_ident", "ident", r#""(?:[^"]|"")+""#),
            T!(
                "quoted_literal",
                "quoted_literal",
                "quoted_literal",
                "'[^']*'"
            ),
            T!("bind_var", "bind_var", "bind_var", r"(?i):[a-z][a-z0-9_]*"),
        ],
        keywords: &[
            T!("after"),
            T!("alter"),
            T!("analyze"),
            T!("and"),
            T!("as"),
            T!("associate"),
            T!("audit"),
            T!("before"),
            T!("begin"),
            T!("between"),
            T!("bfile"),
            T!("binary_double"),
            T!("binary_float"),
            T!("blob"),
            T!("byte"),
            T!("call"),
            T!("char"),
            T!("character"),
            T!("clob"),
            T!("clone"),
            T!("comment"),
            T!("container"),
            T!("create"),
            T!("crossedition"),
            T!("database"),
            T!("date"),
            T!("day"),
            T!("db_role_change"),
            T!("ddl"),
            T!("dec"),
            T!("decimal"),
            T!("declare"),
            T!("default"),
            T!("delete"),
            T!("deterministic"),
            T!("disable"),
            T!("disassociate"),
            T!("double"),
            T!("drop"),
            T!("each"),
            T!("editionable"),
            T!("else"),
            T!("elsif"),
            T!("enable"),
            T!("end"),
            T!("float"),
            T!("follows"),
            T!("for"),
            T!("forward"),
            T!("from"),
            T!("function"),
            T!("grant"),
            T!("if"),
            T!("ilike", "ilike", "comparison_op"),
            T!("in"),
            T!("insert"),
            T!("instead"),
            T!("int"),
            T!("integer"),
            T!("interval"),
            T!("into"),
            T!("is"),
            T!("like", "like", "comparison_op"),
            T!("local"),
            T!("logoff"),
            T!("logon"),
            T!("long"),
            T!("month"),
            T!("national"),
            T!("nchar"),
            T!("nclob"),
            T!("new"),
            T!("noaudit"),
            T!("nocopy"),
            T!("noneditionable"),
            T!("not"),
            T!("null"),
            T!("number"),
            T!("numeric"),
            T!("nvarchar2"),
            T!("of"),
            T!("old"),
            T!("on"),
            T!("or"),
            T!("out"),
            T!("parent"),
            T!("pluggable"),
            T!("precedes"),
            T!("precision"),
            T!("procedure"),
            T!("raw"),
            T!("real"),
            T!("referencing"),
            T!("rename"),
            T!("replace"),
            T!("return"),
            T!("returning"),
            T!("reverse"),
            T!("revoke"),
            T!("row"),
            T!("rowid"),
            T!("schema"),
            T!("second"),
            T!("select"),
            T!("servererror"),
            T!("set"),
            T!("shutdown"),
            T!("smallint"),
            T!("startup"),
            T!("statistics"),
            T!("suspend"),
            T!("then"),
            T!("time"),
            T!("timestamp"),
            T!("to"),
            T!("trigger"),
            T!("truncate"),
            T!("type"),
            T!("unplug"),
            T!("update"),
            T!("urowid"),
            T!("values"),
            T!("varchar"),
            T!("varchar2"),
            T!("varying"),
            T!("when"),
            T!("where"),
            T!("with"),
            T!("year"),
            T!("zone"),
        ],
    };

    pub(crate) const SYNTAX_NODES: &'_ [SyntaxNode<'_>] =
        &[
            S!("l_paren", "Left Paren"),
            S!("r_paren", "Right Paren"),
            S!("percentage", "Percentage symbol"),
            S!("exclam", "An exclamation mark `!`"),
            S!("bind_var", "A bind variable, e.g. `:OLD`"),
            S!("plus", "A plus `+`"),
            S!("minus", "A minus `-`"),
            S!("asterisk", "An asterisk `*`"),
            S!("slash", "Slash char `/`"),
            S!("and", "Logical operator AND"),
            S!("or", "Logical operator OR"),
            S!("not", "Unary logical operator NOT"),
            S!("comment", "Inline comment starting with `--`"),
            S!("whitespace", "Any whitespace character"),
            S!("keyword", "A SQL keyword, e.g. `CREATE`"),
            S!("ident_group", "An identifier group, consisting of multiple idents"),
            S!("ident", "An identifier, either quoted or unquoted"),
            S!("type_name", "A type name"),
            S!("dot", "A single dot"),
            S!("comma", "A single comma"),
            S!("semicolon", "A semi colon"),
            S!("colon", "A colon token"),
            S!("assign", "An Assign operator `:=`"),
            S!("concat", "A concatination operator `||`"),
            S!("datatype", "Any built-in oracle datatype"),
            S!("type_attribute", "A `%TYPE` attribute"),
            S!("integer", "Any integer, positive and negative"),
            S!("dollar_quote", "Single dollar quote `$$`"),
            S!("quoted_literal", "A single quoted literal"),
            S!("param", "A single Param node, consisting of name & type"),
            S!("param_list", "A node that consists of multiple parameters"),
            S!("procedure", "A node that marks a full CREATE [..] PROCEDURE block"),
            S!("procedure_header", "A node that marks a PROCEDURE header with params"),
            S!("trigger","A node that marks a full CREATE [..] TRIGGER block"),
            S!("trigger_header","A node that marks a TRIGGER header"),
            S!("block", "A node that marks a block"),
            S!("block_statement", "A node that marks an individual statement inside a block"),
            S!("declare_section", "A node that marks the declare section of a block"),
            S!("function_invocation", "An invocation of a function, from the identifier and the opening bracket to the closing bracket"),
            S!("argument_list", "A list of arguments inside a `FunctionInvocation`. Made of multiple `Arguments`, separated by commas"),
            S!("argument", "A singular argument inside an argument list"),
            S!("function", "A node that marks a full CREATE [..] FUNCTION block"),
            S!("function_header", "A node that marks a FUNCTION header with params and return type"),
            S!("select_stmt", "A node that marks a full SELECT statement"),
            S!("insert_stmt", "A node that marks a full INSERT statement"),
            S!("column_expr", "A single column expression, as part of an SELECT clause"),
            S!("select_clause", "A node that contains the whole SELECT clause of a query"),
            S!("into_clause", "A node that contains an `INTO` clause of a SELECT statement"),
            S!("where_clause", "Represent a complete `WHERE` clause expression"),
            S!("variable_decl", "A node that marks a variable declaration as part of a function or procedure"),
            S!("variable_decl_list", "A node that marks a list of variable declarations of functions and procedures"),
            S!("expression", "Holds a generic SQL logic/arithmetic expression"),
            S!("arithmetic_op", "Represents an arithmetic SQL operator (+, -, *, /)"),
            S!("comparison_op", "Represents an arithmetic SQL comparison operator (=, <>, <, >, <=, >=) or other types of comparison operators of SQL (ilike, like)"),
            S!("logic_op", "Represents a logical SQL operator (AND, OR, NOT)"),
            S!("text", "A text slice node"),
            S!("error", "An error token with a cause"),
            S!("root", "The root node element"),
        ];
}
