// SPDX-License-Identifier: SEE LICENSE IN LICENSE.md
// SPDX-FileCopyrightText: 2023 CYBERTEC PostgreSQL International GmbH
// <office@cybertec.at>

//! Generated by `crates/source_gen/build.rs`, do not edit manually.

#[derive(logos :: Logos, Debug, Copy, Clone, PartialEq, Eq)]
pub enum TokenKind {
    #[regex("--.*")]
    InlineComment,
    #[regex("[ \t\n\r]+")]
    Whitespace,
    #[token("$$", ignore(case))]
    DollarQuote,
    #[token(":=", ignore(case))]
    Assign,
    #[token("*", ignore(case))]
    Asterisk,
    #[token(",", ignore(case))]
    Comma,
    #[regex("<>|<|>|<=|>=")]
    Comparison,
    #[token(".", ignore(case))]
    Dot,
    #[token("..", ignore(case))]
    DoubleDot,
    #[token("||", ignore(case))]
    DoublePipe,
    #[token("=", ignore(case))]
    Equals,
    #[token("!", ignore(case))]
    Exclam,
    #[token("(", ignore(case))]
    LParen,
    #[token("-", ignore(case))]
    Minus,
    #[token("(+)", ignore(case))]
    OracleJoin,
    #[token("%", ignore(case))]
    Percentage,
    #[token("+", ignore(case))]
    Plus,
    #[token(")", ignore(case))]
    RParen,
    #[token(";", ignore(case))]
    Semicolon,
    #[token("/", ignore(case))]
    Slash,
    #[regex("-?\\d+", priority = 2)]
    Integer,
    #[regex("-?(\\d+\\.\\d*|\\d*\\.\\d+)", priority = 2)]
    Decimal,
    #[regex("(?i)[a-z_][a-z0-9_$#]*", priority = 1)]
    UnquotedIdent,
    #[regex("\"(?:[^\"]|\"\")+\"")]
    QuotedIdent,
    #[regex("'[^']*'")]
    QuotedLiteral,
    #[regex("(?i):[a-z][a-z0-9_]*")]
    BindVar,
    #[regex("(?i)<<[a-z_][a-z0-9_$#]*>>", priority = 1)]
    LoopLabel,
    #[regex("[0-9]*[[:space:]]?\\.\\.[[:space:]]?[0-9]*", priority = 5)]
    IterRange,
    #[token("accessible", ignore(case))]
    AccessibleKw,
    #[token("add", ignore(case))]
    AddKw,
    #[token("after", ignore(case))]
    AfterKw,
    #[token("agent", ignore(case))]
    AgentKw,
    #[token("all", ignore(case))]
    AllKw,
    #[token("allow", ignore(case))]
    AllowKw,
    #[token("alter", ignore(case))]
    AlterKw,
    #[token("analyze", ignore(case))]
    AnalyzeKw,
    #[token("and", ignore(case))]
    AndKw,
    #[token("annotations", ignore(case))]
    AnnotationsKw,
    #[token("any", ignore(case))]
    AnyKw,
    #[token("anyschema", ignore(case))]
    AnyschemaKw,
    #[token("apply", ignore(case))]
    ApplyKw,
    #[token("array", ignore(case))]
    ArrayKw,
    #[token("as", ignore(case))]
    AsKw,
    #[token("asc", ignore(case))]
    AscKw,
    #[token("associate", ignore(case))]
    AssociateKw,
    #[token("audit", ignore(case))]
    AuditKw,
    #[token("authid", ignore(case))]
    AuthidKw,
    #[token("batch", ignore(case))]
    BatchKw,
    #[token("before", ignore(case))]
    BeforeKw,
    #[token("begin", ignore(case))]
    BeginKw,
    #[token("bequeath", ignore(case))]
    BequeathKw,
    #[token("between", ignore(case))]
    BetweenKw,
    #[token("bfile", ignore(case))]
    BfileKw,
    #[token("binary", ignore(case))]
    BinaryKw,
    #[token("binary_double", ignore(case))]
    BinaryDoubleKw,
    #[token("binary_float", ignore(case))]
    BinaryFloatKw,
    #[token("binary_integer", ignore(case))]
    BinaryIntegerKw,
    #[token("blob", ignore(case))]
    BlobKw,
    #[token("body", ignore(case))]
    BodyKw,
    #[token("bulk", ignore(case))]
    BulkKw,
    #[token("by", ignore(case))]
    ByKw,
    #[token("byte", ignore(case))]
    ByteKw,
    #[token("cache", ignore(case))]
    CacheKw,
    #[token("call", ignore(case))]
    CallKw,
    #[token("cascade", ignore(case))]
    CascadeKw,
    #[token("case", ignore(case))]
    CaseKw,
    #[regex("(?i)c", priority = 2)]
    CKw,
    #[token("char", ignore(case))]
    CharKw,
    #[token("character", ignore(case))]
    CharacterKw,
    #[token("charsetform", ignore(case))]
    CharsetformKw,
    #[token("charsetid", ignore(case))]
    CharsetidKw,
    #[token("check", ignore(case))]
    CheckKw,
    #[token("clob", ignore(case))]
    ClobKw,
    #[token("clone", ignore(case))]
    CloneKw,
    #[token("cluster", ignore(case))]
    ClusterKw,
    #[token("collation", ignore(case))]
    CollationKw,
    #[token("collect", ignore(case))]
    CollectKw,
    #[token("comment", ignore(case))]
    CommentKw,
    #[token("commit", ignore(case))]
    CommitKw,
    #[token("connect", ignore(case))]
    ConnectKw,
    #[token("connect_by_root", ignore(case))]
    ConnectByRootKw,
    #[token("constant", ignore(case))]
    ConstantKw,
    #[token("constraint", ignore(case))]
    ConstraintKw,
    #[token("constructor", ignore(case))]
    ConstructorKw,
    #[token("container", ignore(case))]
    ContainerKw,
    #[token("container_map", ignore(case))]
    ContainerMapKw,
    #[token("containers_default", ignore(case))]
    ContainersDefaultKw,
    #[token("continue", ignore(case))]
    ContinueKw,
    #[token("context", ignore(case))]
    ContextKw,
    #[token("create", ignore(case))]
    CreateKw,
    #[token("cross", ignore(case))]
    CrossKw,
    #[token("crossedition", ignore(case))]
    CrosseditionKw,
    #[token("cube", ignore(case))]
    CubeKw,
    #[token("current_user", ignore(case))]
    CurrentUserKw,
    #[token("cursor", ignore(case))]
    CursorKw,
    #[token("cycle", ignore(case))]
    CycleKw,
    #[token("data", ignore(case))]
    DataKw,
    #[token("database", ignore(case))]
    DatabaseKw,
    #[token("date", ignore(case))]
    DateKw,
    #[token("day", ignore(case))]
    DayKw,
    #[token("db_role_change", ignore(case))]
    DbRoleChangeKw,
    #[token("ddl", ignore(case))]
    DdlKw,
    #[token("dec", ignore(case))]
    DecKw,
    #[token("decimal", ignore(case))]
    DecimalKw,
    #[token("declare", ignore(case))]
    DeclareKw,
    #[token("default", ignore(case))]
    DefaultKw,
    #[token("deferrable", ignore(case))]
    DeferrableKw,
    #[token("deferred", ignore(case))]
    DeferredKw,
    #[token("definer", ignore(case))]
    DefinerKw,
    #[token("delete", ignore(case))]
    DeleteKw,
    #[token("desc", ignore(case))]
    DescKw,
    #[token("deterministic", ignore(case))]
    DeterministicKw,
    #[token("disable", ignore(case))]
    DisableKw,
    #[token("disallow", ignore(case))]
    DisallowKw,
    #[token("disassociate", ignore(case))]
    DisassociateKw,
    #[token("double", ignore(case))]
    DoubleKw,
    #[token("drop", ignore(case))]
    DropKw,
    #[token("duration", ignore(case))]
    DurationKw,
    #[token("each", ignore(case))]
    EachKw,
    #[token("editionable", ignore(case))]
    EditionableKw,
    #[token("editioning", ignore(case))]
    EditioningKw,
    #[token("element", ignore(case))]
    ElementKw,
    #[token("else", ignore(case))]
    ElseKw,
    #[token("elsif", ignore(case))]
    ElsifKw,
    #[token("enable", ignore(case))]
    EnableKw,
    #[token("end", ignore(case))]
    EndKw,
    #[token("env", ignore(case))]
    EnvKw,
    #[token("exception", ignore(case))]
    ExceptionKw,
    #[token("exceptions", ignore(case))]
    ExceptionsKw,
    #[token("execute", ignore(case))]
    ExecuteKw,
    #[token("exists", ignore(case))]
    ExistsKw,
    #[token("exit", ignore(case))]
    ExitKw,
    #[token("extend", ignore(case))]
    ExtendKw,
    #[token("extended", ignore(case))]
    ExtendedKw,
    #[token("external", ignore(case))]
    ExternalKw,
    #[token("final", ignore(case))]
    FinalKw,
    #[token("first", ignore(case))]
    FirstKw,
    #[token("float", ignore(case))]
    FloatKw,
    #[token("follows", ignore(case))]
    FollowsKw,
    #[token("for", ignore(case))]
    ForKw,
    #[token("force", ignore(case))]
    ForceKw,
    #[token("foreign", ignore(case))]
    ForeignKw,
    #[token("forward", ignore(case))]
    ForwardKw,
    #[token("from", ignore(case))]
    FromKw,
    #[token("full", ignore(case))]
    FullKw,
    #[token("function", ignore(case))]
    FunctionKw,
    #[token("global", ignore(case))]
    GlobalKw,
    #[token("grant", ignore(case))]
    GrantKw,
    #[token("group", ignore(case))]
    GroupKw,
    #[token("grouping", ignore(case))]
    GroupingKw,
    #[token("hash", ignore(case))]
    HashKw,
    #[token("having", ignore(case))]
    HavingKw,
    #[token("id", ignore(case))]
    IdKw,
    #[token("identifier", ignore(case))]
    IdentifierKw,
    #[token("if", ignore(case))]
    IfKw,
    #[token("ilike", ignore(case))]
    IlikeKw,
    #[token("immediate", ignore(case))]
    ImmediateKw,
    #[token("immutable", ignore(case))]
    ImmutableKw,
    #[token("in", ignore(case))]
    InKw,
    #[token("increment", ignore(case))]
    IncrementKw,
    #[token("index", ignore(case))]
    IndexKw,
    #[token("indicator", ignore(case))]
    IndicatorKw,
    #[token("indices", ignore(case))]
    IndicesKw,
    #[token("initially", ignore(case))]
    InitiallyKw,
    #[token("inner", ignore(case))]
    InnerKw,
    #[token("insert", ignore(case))]
    InsertKw,
    #[token("instantiable", ignore(case))]
    InstantiableKw,
    #[token("instead", ignore(case))]
    InsteadKw,
    #[token("int", ignore(case))]
    IntKw,
    #[token("integer", ignore(case))]
    IntegerKw,
    #[token("interval", ignore(case))]
    IntervalKw,
    #[token("into", ignore(case))]
    IntoKw,
    #[token("invisible", ignore(case))]
    InvisibleKw,
    #[token("is", ignore(case))]
    IsKw,
    #[token("java", ignore(case))]
    JavaKw,
    #[token("keep", ignore(case))]
    KeepKw,
    #[token("join", ignore(case))]
    JoinKw,
    #[token("key", ignore(case))]
    KeyKw,
    #[token("language", ignore(case))]
    LanguageKw,
    #[token("large", ignore(case))]
    LargeKw,
    #[token("last", ignore(case))]
    LastKw,
    #[token("left", ignore(case))]
    LeftKw,
    #[token("length", ignore(case))]
    LengthKw,
    #[token("library", ignore(case))]
    LibraryKw,
    #[token("like", ignore(case))]
    LikeKw,
    #[token("lobs", ignore(case))]
    LobsKw,
    #[token("local", ignore(case))]
    LocalKw,
    #[token("logoff", ignore(case))]
    LogoffKw,
    #[token("logon", ignore(case))]
    LogonKw,
    #[token("long", ignore(case))]
    LongKw,
    #[token("loop", ignore(case))]
    LoopKw,
    #[token("map", ignore(case))]
    MapKw,
    #[token("maxlen", ignore(case))]
    MaxlenKw,
    #[token("maxvalue", ignore(case))]
    MaxvalueKw,
    #[token("member", ignore(case))]
    MemberKw,
    #[token("metadata", ignore(case))]
    MetadataKw,
    #[token("minvalue", ignore(case))]
    MinvalueKw,
    #[token("mle", ignore(case))]
    MleKw,
    #[token("module", ignore(case))]
    ModuleKw,
    #[token("month", ignore(case))]
    MonthKw,
    #[token("mutable", ignore(case))]
    MutableKw,
    #[token("name", ignore(case))]
    NameKw,
    #[token("national", ignore(case))]
    NationalKw,
    #[token("natural", ignore(case))]
    NaturalKw,
    #[token("nchar", ignore(case))]
    NcharKw,
    #[token("nclob", ignore(case))]
    NclobKw,
    #[token("new", ignore(case))]
    NewKw,
    #[token("no", ignore(case))]
    NoKw,
    #[token("noaudit", ignore(case))]
    NoauditKw,
    #[token("nocache", ignore(case))]
    NocacheKw,
    #[token("nocopy", ignore(case))]
    NocopyKw,
    #[token("nocycle", ignore(case))]
    NocycleKw,
    #[token("noextend", ignore(case))]
    NoextendKw,
    #[token("nokeep", ignore(case))]
    NokeepKw,
    #[token("nomaxvalue", ignore(case))]
    NomaxvalueKw,
    #[token("nominvalue", ignore(case))]
    NominvalueKw,
    #[token("none", ignore(case))]
    NoneKw,
    #[token("noneditionable", ignore(case))]
    NoneditionableKw,
    #[token("nonschema", ignore(case))]
    NonschemaKw,
    #[token("noorder", ignore(case))]
    NoorderKw,
    #[token("noprecheck", ignore(case))]
    NoprecheckKw,
    #[token("norely", ignore(case))]
    NorelyKw,
    #[token("noscale", ignore(case))]
    NoscaleKw,
    #[token("noshard", ignore(case))]
    NoshardKw,
    #[token("not", ignore(case))]
    NotKw,
    #[token("novalidate", ignore(case))]
    NovalidateKw,
    #[token("nowait", ignore(case))]
    NowaitKw,
    #[token("null", ignore(case))]
    NullKw,
    #[token("nulls", ignore(case))]
    NullsKw,
    #[token("number", ignore(case))]
    NumberKw,
    #[token("numeric", ignore(case))]
    NumericKw,
    #[token("nvarchar2", ignore(case))]
    Nvarchar2Kw,
    #[token("object", ignore(case))]
    ObjectKw,
    #[token("of", ignore(case))]
    OfKw,
    #[token("oid", ignore(case))]
    OidKw,
    #[token("old", ignore(case))]
    OldKw,
    #[token("on", ignore(case))]
    OnKw,
    #[token("only", ignore(case))]
    OnlyKw,
    #[token("option", ignore(case))]
    OptionKw,
    #[token("or", ignore(case))]
    OrKw,
    #[token("order", ignore(case))]
    OrderKw,
    #[token("others", ignore(case))]
    OthersKw,
    #[token("out", ignore(case))]
    OutKw,
    #[token("overriding", ignore(case))]
    OverridingKw,
    #[token("outer", ignore(case))]
    OuterKw,
    #[token("package", ignore(case))]
    PackageKw,
    #[token("parallel_enable", ignore(case))]
    ParallelEnableKw,
    #[token("parameters", ignore(case))]
    ParametersKw,
    #[token("parent", ignore(case))]
    ParentKw,
    #[token("pairs", ignore(case))]
    PairsKw,
    #[token("partition", ignore(case))]
    PartitionKw,
    #[token("persistable", ignore(case))]
    PersistableKw,
    #[token("pipelined", ignore(case))]
    PipelinedKw,
    #[token("plpgsql", ignore(case))]
    PlpgsqlKw,
    #[token("pls_integer", ignore(case))]
    PlsIntegerKw,
    #[token("pluggable", ignore(case))]
    PluggableKw,
    #[token("pragma", ignore(case))]
    PragmaKw,
    #[token("precedes", ignore(case))]
    PrecedesKw,
    #[token("precheck", ignore(case))]
    PrecheckKw,
    #[token("precision", ignore(case))]
    PrecisionKw,
    #[token("prior", ignore(case))]
    PriorKw,
    #[token("primary", ignore(case))]
    PrimaryKw,
    #[token("procedure", ignore(case))]
    ProcedureKw,
    #[token("range", ignore(case))]
    RangeKw,
    #[token("raise", ignore(case))]
    RaiseKw,
    #[token("raw", ignore(case))]
    RawKw,
    #[token("read", ignore(case))]
    ReadKw,
    #[token("real", ignore(case))]
    RealKw,
    #[token("record", ignore(case))]
    RecordKw,
    #[token("ref", ignore(case))]
    RefKw,
    #[token("reference", ignore(case))]
    ReferenceKw,
    #[token("references", ignore(case))]
    ReferencesKw,
    #[token("referencing", ignore(case))]
    ReferencingKw,
    #[token("relies_on", ignore(case))]
    ReliesOnKw,
    #[token("rely", ignore(case))]
    RelyKw,
    #[token("rename", ignore(case))]
    RenameKw,
    #[token("repeat", ignore(case))]
    RepeatKw,
    #[token("replace", ignore(case))]
    ReplaceKw,
    #[token("result", ignore(case))]
    ResultKw,
    #[token("result_cache", ignore(case))]
    ResultCacheKw,
    #[token("restricted_references", ignore(case))]
    RestrictedReferencesKw,
    #[token("return", ignore(case))]
    ReturnKw,
    #[token("returning", ignore(case))]
    ReturningKw,
    #[token("reverse", ignore(case))]
    ReverseKw,
    #[token("revoke", ignore(case))]
    RevokeKw,
    #[token("rnds", ignore(case))]
    RndsKw,
    #[token("rnps", ignore(case))]
    RnpsKw,
    #[token("rollup", ignore(case))]
    RollupKw,
    #[token("right", ignore(case))]
    RightKw,
    #[token("row", ignore(case))]
    RowKw,
    #[token("rowid", ignore(case))]
    RowidKw,
    #[token("rowtype", ignore(case))]
    RowtypeKw,
    #[token("scale", ignore(case))]
    ScaleKw,
    #[token("schema", ignore(case))]
    SchemaKw,
    #[token("scope", ignore(case))]
    ScopeKw,
    #[token("second", ignore(case))]
    SecondKw,
    #[token("select", ignore(case))]
    SelectKw,
    #[token("self", ignore(case))]
    SelfKw,
    #[token("sequence", ignore(case))]
    SequenceKw,
    #[token("servererror", ignore(case))]
    ServererrorKw,
    #[token("session", ignore(case))]
    SessionKw,
    #[token("set", ignore(case))]
    SetKw,
    #[token("sets", ignore(case))]
    SetsKw,
    #[token("shard", ignore(case))]
    ShardKw,
    #[token("sharing", ignore(case))]
    SharingKw,
    #[token("shutdown", ignore(case))]
    ShutdownKw,
    #[token("siblings", ignore(case))]
    SiblingsKw,
    #[token("signature", ignore(case))]
    SignatureKw,
    #[token("smallint", ignore(case))]
    SmallintKw,
    #[token("start", ignore(case))]
    StartKw,
    #[token("starts", ignore(case))]
    StartsKw,
    #[token("startup", ignore(case))]
    StartupKw,
    #[token("static", ignore(case))]
    StaticKw,
    #[token("statistics", ignore(case))]
    StatisticsKw,
    #[token("store", ignore(case))]
    StoreKw,
    #[token("string", ignore(case))]
    StringKw,
    #[token("struct", ignore(case))]
    StructKw,
    #[token("subtype", ignore(case))]
    SubtypeKw,
    #[token("suspend", ignore(case))]
    SuspendKw,
    #[token("table", ignore(case))]
    TableKw,
    #[token("tables", ignore(case))]
    TablesKw,
    #[token("tdo", ignore(case))]
    TdoKw,
    #[token("then", ignore(case))]
    ThenKw,
    #[token("time", ignore(case))]
    TimeKw,
    #[token("timestamp", ignore(case))]
    TimestampKw,
    #[token("to", ignore(case))]
    ToKw,
    #[token("trigger", ignore(case))]
    TriggerKw,
    #[token("truncate", ignore(case))]
    TruncateKw,
    #[token("trust", ignore(case))]
    TrustKw,
    #[token("type", ignore(case))]
    TypeKw,
    #[token("under", ignore(case))]
    UnderKw,
    #[token("unique", ignore(case))]
    UniqueKw,
    #[token("unplug", ignore(case))]
    UnplugKw,
    #[token("update", ignore(case))]
    UpdateKw,
    #[token("urowid", ignore(case))]
    UrowidKw,
    #[token("using", ignore(case))]
    UsingKw,
    #[token("using_nls_comp", ignore(case))]
    UsingNlsCompKw,
    #[token("validate", ignore(case))]
    ValidateKw,
    #[token("value", ignore(case))]
    ValueKw,
    #[token("values", ignore(case))]
    ValuesKw,
    #[token("varchar", ignore(case))]
    VarcharKw,
    #[token("varchar2", ignore(case))]
    Varchar2Kw,
    #[token("varray", ignore(case))]
    VarrayKw,
    #[token("varrays", ignore(case))]
    VarraysKw,
    #[token("varying", ignore(case))]
    VaryingKw,
    #[token("view", ignore(case))]
    ViewKw,
    #[token("visible", ignore(case))]
    VisibleKw,
    #[token("wait", ignore(case))]
    WaitKw,
    #[token("when", ignore(case))]
    WhenKw,
    #[token("where", ignore(case))]
    WhereKw,
    #[token("while", ignore(case))]
    WhileKw,
    #[token("with", ignore(case))]
    WithKw,
    #[token("wnds", ignore(case))]
    WndsKw,
    #[token("wnps", ignore(case))]
    WnpsKw,
    #[token("work", ignore(case))]
    WorkKw,
    #[token("write", ignore(case))]
    WriteKw,
    #[token("xmlschema", ignore(case))]
    XmlschemaKw,
    #[token("xmltype", ignore(case))]
    XmltypeKw,
    #[token("year", ignore(case))]
    YearKw,
    #[token("zone", ignore(case))]
    ZoneKw,
    Error,
    #[doc = r" Marker token to indicate end of input, not used by lexer directly."]
    Eof,
}
impl TokenKind {
    pub fn is_trivia(self) -> bool {
        matches!(self, Self::InlineComment | Self::Whitespace)
    }
    pub fn is_punct(self) -> bool {
        matches!(
            self,
            Self::DollarQuote
                | Self::Assign
                | Self::Asterisk
                | Self::Comma
                | Self::Comparison
                | Self::Dot
                | Self::DoubleDot
                | Self::DoublePipe
                | Self::Equals
                | Self::Exclam
                | Self::LParen
                | Self::Minus
                | Self::OracleJoin
                | Self::Percentage
                | Self::Plus
                | Self::RParen
                | Self::Semicolon
                | Self::Slash
        )
    }
    pub fn is_literal(self) -> bool {
        matches!(
            self,
            Self::Integer
                | Self::Decimal
                | Self::UnquotedIdent
                | Self::QuotedIdent
                | Self::QuotedLiteral
                | Self::BindVar
                | Self::LoopLabel
                | Self::IterRange
        )
    }
    pub fn is_ident(self) -> bool {
        matches!(
            self,
            Self::UnquotedIdent | Self::QuotedIdent | Self::BindVar
        ) || !(self.is_trivia()
            || self.is_punct()
            || self.is_literal()
            || matches!(self, Self::Eof | Self::Error))
    }
}
impl std::fmt::Display for TokenKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{self:?}")
    }
}
#[macro_export]
macro_rules ! T { [inline_comment] => { TokenKind :: InlineComment } ; [whitespace] => { TokenKind :: Whitespace } ; ["$$"] => { TokenKind :: DollarQuote } ; [:=] => { TokenKind :: Assign } ; [*] => { TokenKind :: Asterisk } ; [,] => { TokenKind :: Comma } ; [comparison] => { TokenKind :: Comparison } ; [.] => { TokenKind :: Dot } ; [..] => { TokenKind :: DoubleDot } ; [||] => { TokenKind :: DoublePipe } ; [=] => { TokenKind :: Equals } ; [!] => { TokenKind :: Exclam } ; ["("] => { TokenKind :: LParen } ; [-] => { TokenKind :: Minus } ; [(+)] => { TokenKind :: OracleJoin } ; [%] => { TokenKind :: Percentage } ; [+] => { TokenKind :: Plus } ; [")"] => { TokenKind :: RParen } ; [;] => { TokenKind :: Semicolon } ; [/] => { TokenKind :: Slash } ; [int_literal] => { TokenKind :: Integer } ; [decimal_literal] => { TokenKind :: Decimal } ; [unquoted_ident] => { TokenKind :: UnquotedIdent } ; [quoted_ident] => { TokenKind :: QuotedIdent } ; [quoted_literal] => { TokenKind :: QuotedLiteral } ; [bind_var] => { TokenKind :: BindVar } ; [loop_label] => { TokenKind :: LoopLabel } ; [iter_range] => { TokenKind :: IterRange } ; [accessible] => { TokenKind :: AccessibleKw } ; [add] => { TokenKind :: AddKw } ; [after] => { TokenKind :: AfterKw } ; [agent] => { TokenKind :: AgentKw } ; [all] => { TokenKind :: AllKw } ; [allow] => { TokenKind :: AllowKw } ; [alter] => { TokenKind :: AlterKw } ; [analyze] => { TokenKind :: AnalyzeKw } ; [and] => { TokenKind :: AndKw } ; [annotations] => { TokenKind :: AnnotationsKw } ; [any] => { TokenKind :: AnyKw } ; [anyschema] => { TokenKind :: AnyschemaKw } ; [apply] => { TokenKind :: ApplyKw } ; [array] => { TokenKind :: ArrayKw } ; [as] => { TokenKind :: AsKw } ; [asc] => { TokenKind :: AscKw } ; [associate] => { TokenKind :: AssociateKw } ; [audit] => { TokenKind :: AuditKw } ; [authid] => { TokenKind :: AuthidKw } ; [batch] => { TokenKind :: BatchKw } ; [before] => { TokenKind :: BeforeKw } ; [begin] => { TokenKind :: BeginKw } ; [bequeath] => { TokenKind :: BequeathKw } ; [between] => { TokenKind :: BetweenKw } ; [bfile] => { TokenKind :: BfileKw } ; [binary] => { TokenKind :: BinaryKw } ; [binary_double] => { TokenKind :: BinaryDoubleKw } ; [binary_float] => { TokenKind :: BinaryFloatKw } ; [binary_integer] => { TokenKind :: BinaryIntegerKw } ; [blob] => { TokenKind :: BlobKw } ; [body] => { TokenKind :: BodyKw } ; [bulk] => { TokenKind :: BulkKw } ; [by] => { TokenKind :: ByKw } ; [byte] => { TokenKind :: ByteKw } ; [cache] => { TokenKind :: CacheKw } ; [call] => { TokenKind :: CallKw } ; [cascade] => { TokenKind :: CascadeKw } ; [case] => { TokenKind :: CaseKw } ; [c] => { TokenKind :: CKw } ; [char] => { TokenKind :: CharKw } ; [character] => { TokenKind :: CharacterKw } ; [charsetform] => { TokenKind :: CharsetformKw } ; [charsetid] => { TokenKind :: CharsetidKw } ; [check] => { TokenKind :: CheckKw } ; [clob] => { TokenKind :: ClobKw } ; [clone] => { TokenKind :: CloneKw } ; [cluster] => { TokenKind :: ClusterKw } ; [collation] => { TokenKind :: CollationKw } ; [collect] => { TokenKind :: CollectKw } ; [comment] => { TokenKind :: CommentKw } ; [commit] => { TokenKind :: CommitKw } ; [connect] => { TokenKind :: ConnectKw } ; [connect_by_root] => { TokenKind :: ConnectByRootKw } ; [constant] => { TokenKind :: ConstantKw } ; [constraint] => { TokenKind :: ConstraintKw } ; [constructor] => { TokenKind :: ConstructorKw } ; [container] => { TokenKind :: ContainerKw } ; [container_map] => { TokenKind :: ContainerMapKw } ; [containers_default] => { TokenKind :: ContainersDefaultKw } ; [continue] => { TokenKind :: ContinueKw } ; [context] => { TokenKind :: ContextKw } ; [create] => { TokenKind :: CreateKw } ; [cross] => { TokenKind :: CrossKw } ; [crossedition] => { TokenKind :: CrosseditionKw } ; [cube] => { TokenKind :: CubeKw } ; [current_user] => { TokenKind :: CurrentUserKw } ; [cursor] => { TokenKind :: CursorKw } ; [cycle] => { TokenKind :: CycleKw } ; [data] => { TokenKind :: DataKw } ; [database] => { TokenKind :: DatabaseKw } ; [date] => { TokenKind :: DateKw } ; [day] => { TokenKind :: DayKw } ; [db_role_change] => { TokenKind :: DbRoleChangeKw } ; [ddl] => { TokenKind :: DdlKw } ; [dec] => { TokenKind :: DecKw } ; [decimal] => { TokenKind :: DecimalKw } ; [declare] => { TokenKind :: DeclareKw } ; [default] => { TokenKind :: DefaultKw } ; [deferrable] => { TokenKind :: DeferrableKw } ; [deferred] => { TokenKind :: DeferredKw } ; [definer] => { TokenKind :: DefinerKw } ; [delete] => { TokenKind :: DeleteKw } ; [desc] => { TokenKind :: DescKw } ; [deterministic] => { TokenKind :: DeterministicKw } ; [disable] => { TokenKind :: DisableKw } ; [disallow] => { TokenKind :: DisallowKw } ; [disassociate] => { TokenKind :: DisassociateKw } ; [double] => { TokenKind :: DoubleKw } ; [drop] => { TokenKind :: DropKw } ; [duration] => { TokenKind :: DurationKw } ; [each] => { TokenKind :: EachKw } ; [editionable] => { TokenKind :: EditionableKw } ; [editioning] => { TokenKind :: EditioningKw } ; [element] => { TokenKind :: ElementKw } ; [else] => { TokenKind :: ElseKw } ; [elsif] => { TokenKind :: ElsifKw } ; [enable] => { TokenKind :: EnableKw } ; [end] => { TokenKind :: EndKw } ; [env] => { TokenKind :: EnvKw } ; [exception] => { TokenKind :: ExceptionKw } ; [exceptions] => { TokenKind :: ExceptionsKw } ; [execute] => { TokenKind :: ExecuteKw } ; [exists] => { TokenKind :: ExistsKw } ; [exit] => { TokenKind :: ExitKw } ; [extend] => { TokenKind :: ExtendKw } ; [extended] => { TokenKind :: ExtendedKw } ; [external] => { TokenKind :: ExternalKw } ; [final] => { TokenKind :: FinalKw } ; [first] => { TokenKind :: FirstKw } ; [float] => { TokenKind :: FloatKw } ; [follows] => { TokenKind :: FollowsKw } ; [for] => { TokenKind :: ForKw } ; [force] => { TokenKind :: ForceKw } ; [foreign] => { TokenKind :: ForeignKw } ; [forward] => { TokenKind :: ForwardKw } ; [from] => { TokenKind :: FromKw } ; [full] => { TokenKind :: FullKw } ; [function] => { TokenKind :: FunctionKw } ; [global] => { TokenKind :: GlobalKw } ; [grant] => { TokenKind :: GrantKw } ; [group] => { TokenKind :: GroupKw } ; [grouping] => { TokenKind :: GroupingKw } ; [hash] => { TokenKind :: HashKw } ; [having] => { TokenKind :: HavingKw } ; [id] => { TokenKind :: IdKw } ; [identifier] => { TokenKind :: IdentifierKw } ; [if] => { TokenKind :: IfKw } ; [ilike] => { TokenKind :: IlikeKw } ; [immediate] => { TokenKind :: ImmediateKw } ; [immutable] => { TokenKind :: ImmutableKw } ; [in] => { TokenKind :: InKw } ; [increment] => { TokenKind :: IncrementKw } ; [index] => { TokenKind :: IndexKw } ; [indicator] => { TokenKind :: IndicatorKw } ; [indices] => { TokenKind :: IndicesKw } ; [initially] => { TokenKind :: InitiallyKw } ; [inner] => { TokenKind :: InnerKw } ; [insert] => { TokenKind :: InsertKw } ; [instantiable] => { TokenKind :: InstantiableKw } ; [instead] => { TokenKind :: InsteadKw } ; [int] => { TokenKind :: IntKw } ; [integer] => { TokenKind :: IntegerKw } ; [interval] => { TokenKind :: IntervalKw } ; [into] => { TokenKind :: IntoKw } ; [invisible] => { TokenKind :: InvisibleKw } ; [is] => { TokenKind :: IsKw } ; [java] => { TokenKind :: JavaKw } ; [keep] => { TokenKind :: KeepKw } ; [join] => { TokenKind :: JoinKw } ; [key] => { TokenKind :: KeyKw } ; [language] => { TokenKind :: LanguageKw } ; [large] => { TokenKind :: LargeKw } ; [last] => { TokenKind :: LastKw } ; [left] => { TokenKind :: LeftKw } ; [length] => { TokenKind :: LengthKw } ; [library] => { TokenKind :: LibraryKw } ; [like] => { TokenKind :: LikeKw } ; [lobs] => { TokenKind :: LobsKw } ; [local] => { TokenKind :: LocalKw } ; [logoff] => { TokenKind :: LogoffKw } ; [logon] => { TokenKind :: LogonKw } ; [long] => { TokenKind :: LongKw } ; [loop] => { TokenKind :: LoopKw } ; [map] => { TokenKind :: MapKw } ; [maxlen] => { TokenKind :: MaxlenKw } ; [maxvalue] => { TokenKind :: MaxvalueKw } ; [member] => { TokenKind :: MemberKw } ; [metadata] => { TokenKind :: MetadataKw } ; [minvalue] => { TokenKind :: MinvalueKw } ; [mle] => { TokenKind :: MleKw } ; [module] => { TokenKind :: ModuleKw } ; [month] => { TokenKind :: MonthKw } ; [mutable] => { TokenKind :: MutableKw } ; [name] => { TokenKind :: NameKw } ; [national] => { TokenKind :: NationalKw } ; [natural] => { TokenKind :: NaturalKw } ; [nchar] => { TokenKind :: NcharKw } ; [nclob] => { TokenKind :: NclobKw } ; [new] => { TokenKind :: NewKw } ; [no] => { TokenKind :: NoKw } ; [noaudit] => { TokenKind :: NoauditKw } ; [nocache] => { TokenKind :: NocacheKw } ; [nocopy] => { TokenKind :: NocopyKw } ; [nocycle] => { TokenKind :: NocycleKw } ; [noextend] => { TokenKind :: NoextendKw } ; [nokeep] => { TokenKind :: NokeepKw } ; [nomaxvalue] => { TokenKind :: NomaxvalueKw } ; [nominvalue] => { TokenKind :: NominvalueKw } ; [none] => { TokenKind :: NoneKw } ; [noneditionable] => { TokenKind :: NoneditionableKw } ; [nonschema] => { TokenKind :: NonschemaKw } ; [noorder] => { TokenKind :: NoorderKw } ; [noprecheck] => { TokenKind :: NoprecheckKw } ; [norely] => { TokenKind :: NorelyKw } ; [noscale] => { TokenKind :: NoscaleKw } ; [noshard] => { TokenKind :: NoshardKw } ; [not] => { TokenKind :: NotKw } ; [novalidate] => { TokenKind :: NovalidateKw } ; [nowait] => { TokenKind :: NowaitKw } ; [null] => { TokenKind :: NullKw } ; [nulls] => { TokenKind :: NullsKw } ; [number] => { TokenKind :: NumberKw } ; [numeric] => { TokenKind :: NumericKw } ; [nvarchar2] => { TokenKind :: Nvarchar2Kw } ; [object] => { TokenKind :: ObjectKw } ; [of] => { TokenKind :: OfKw } ; [oid] => { TokenKind :: OidKw } ; [old] => { TokenKind :: OldKw } ; [on] => { TokenKind :: OnKw } ; [only] => { TokenKind :: OnlyKw } ; [option] => { TokenKind :: OptionKw } ; [or] => { TokenKind :: OrKw } ; [order] => { TokenKind :: OrderKw } ; [others] => { TokenKind :: OthersKw } ; [out] => { TokenKind :: OutKw } ; [overriding] => { TokenKind :: OverridingKw } ; [outer] => { TokenKind :: OuterKw } ; [package] => { TokenKind :: PackageKw } ; [parallel_enable] => { TokenKind :: ParallelEnableKw } ; [parameters] => { TokenKind :: ParametersKw } ; [parent] => { TokenKind :: ParentKw } ; [pairs] => { TokenKind :: PairsKw } ; [partition] => { TokenKind :: PartitionKw } ; [persistable] => { TokenKind :: PersistableKw } ; [pipelined] => { TokenKind :: PipelinedKw } ; [plpgsql] => { TokenKind :: PlpgsqlKw } ; [pls_integer] => { TokenKind :: PlsIntegerKw } ; [pluggable] => { TokenKind :: PluggableKw } ; [pragma] => { TokenKind :: PragmaKw } ; [precedes] => { TokenKind :: PrecedesKw } ; [precheck] => { TokenKind :: PrecheckKw } ; [precision] => { TokenKind :: PrecisionKw } ; [prior] => { TokenKind :: PriorKw } ; [primary] => { TokenKind :: PrimaryKw } ; [procedure] => { TokenKind :: ProcedureKw } ; [range] => { TokenKind :: RangeKw } ; [raise] => { TokenKind :: RaiseKw } ; [raw] => { TokenKind :: RawKw } ; [read] => { TokenKind :: ReadKw } ; [real] => { TokenKind :: RealKw } ; [record] => { TokenKind :: RecordKw } ; [ref] => { TokenKind :: RefKw } ; [reference] => { TokenKind :: ReferenceKw } ; [references] => { TokenKind :: ReferencesKw } ; [referencing] => { TokenKind :: ReferencingKw } ; [relies_on] => { TokenKind :: ReliesOnKw } ; [rely] => { TokenKind :: RelyKw } ; [rename] => { TokenKind :: RenameKw } ; [repeat] => { TokenKind :: RepeatKw } ; [replace] => { TokenKind :: ReplaceKw } ; [result] => { TokenKind :: ResultKw } ; [result_cache] => { TokenKind :: ResultCacheKw } ; [restricted_references] => { TokenKind :: RestrictedReferencesKw } ; [return] => { TokenKind :: ReturnKw } ; [returning] => { TokenKind :: ReturningKw } ; [reverse] => { TokenKind :: ReverseKw } ; [revoke] => { TokenKind :: RevokeKw } ; [rnds] => { TokenKind :: RndsKw } ; [rnps] => { TokenKind :: RnpsKw } ; [rollup] => { TokenKind :: RollupKw } ; [right] => { TokenKind :: RightKw } ; [row] => { TokenKind :: RowKw } ; [rowid] => { TokenKind :: RowidKw } ; [rowtype] => { TokenKind :: RowtypeKw } ; [scale] => { TokenKind :: ScaleKw } ; [schema] => { TokenKind :: SchemaKw } ; [scope] => { TokenKind :: ScopeKw } ; [second] => { TokenKind :: SecondKw } ; [select] => { TokenKind :: SelectKw } ; [self] => { TokenKind :: SelfKw } ; [sequence] => { TokenKind :: SequenceKw } ; [servererror] => { TokenKind :: ServererrorKw } ; [session] => { TokenKind :: SessionKw } ; [set] => { TokenKind :: SetKw } ; [sets] => { TokenKind :: SetsKw } ; [shard] => { TokenKind :: ShardKw } ; [sharing] => { TokenKind :: SharingKw } ; [shutdown] => { TokenKind :: ShutdownKw } ; [siblings] => { TokenKind :: SiblingsKw } ; [signature] => { TokenKind :: SignatureKw } ; [smallint] => { TokenKind :: SmallintKw } ; [start] => { TokenKind :: StartKw } ; [starts] => { TokenKind :: StartsKw } ; [startup] => { TokenKind :: StartupKw } ; [static] => { TokenKind :: StaticKw } ; [statistics] => { TokenKind :: StatisticsKw } ; [store] => { TokenKind :: StoreKw } ; [string] => { TokenKind :: StringKw } ; [struct] => { TokenKind :: StructKw } ; [subtype] => { TokenKind :: SubtypeKw } ; [suspend] => { TokenKind :: SuspendKw } ; [table] => { TokenKind :: TableKw } ; [tables] => { TokenKind :: TablesKw } ; [tdo] => { TokenKind :: TdoKw } ; [then] => { TokenKind :: ThenKw } ; [time] => { TokenKind :: TimeKw } ; [timestamp] => { TokenKind :: TimestampKw } ; [to] => { TokenKind :: ToKw } ; [trigger] => { TokenKind :: TriggerKw } ; [truncate] => { TokenKind :: TruncateKw } ; [trust] => { TokenKind :: TrustKw } ; [type] => { TokenKind :: TypeKw } ; [under] => { TokenKind :: UnderKw } ; [unique] => { TokenKind :: UniqueKw } ; [unplug] => { TokenKind :: UnplugKw } ; [update] => { TokenKind :: UpdateKw } ; [urowid] => { TokenKind :: UrowidKw } ; [using] => { TokenKind :: UsingKw } ; [using_nls_comp] => { TokenKind :: UsingNlsCompKw } ; [validate] => { TokenKind :: ValidateKw } ; [value] => { TokenKind :: ValueKw } ; [values] => { TokenKind :: ValuesKw } ; [varchar] => { TokenKind :: VarcharKw } ; [varchar2] => { TokenKind :: Varchar2Kw } ; [varray] => { TokenKind :: VarrayKw } ; [varrays] => { TokenKind :: VarraysKw } ; [varying] => { TokenKind :: VaryingKw } ; [view] => { TokenKind :: ViewKw } ; [visible] => { TokenKind :: VisibleKw } ; [wait] => { TokenKind :: WaitKw } ; [when] => { TokenKind :: WhenKw } ; [where] => { TokenKind :: WhereKw } ; [while] => { TokenKind :: WhileKw } ; [with] => { TokenKind :: WithKw } ; [wnds] => { TokenKind :: WndsKw } ; [wnps] => { TokenKind :: WnpsKw } ; [work] => { TokenKind :: WorkKw } ; [write] => { TokenKind :: WriteKw } ; [xmlschema] => { TokenKind :: XmlschemaKw } ; [xmltype] => { TokenKind :: XmltypeKw } ; [year] => { TokenKind :: YearKw } ; [zone] => { TokenKind :: ZoneKw } ; [EOF] => { TokenKind :: Eof } ; }
